// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

model Usuario {
  id                 Int              @id @default(autoincrement())
  email              String           @unique
  contrasena         String
  nombre             String
  fecha_registro     DateTime         @default(now())
  tipo_usuario       TipoUsuario?
  url_portfolio      String?
  info_pago          String?
  direccion_envio    String?
  nivel_acceso       Int?
  fotos              Foto[]           @relation("FotografoFotos")
  compras            Compra[]         @relation("CompradorCompras")
  resenas            Resena[]
  pagos_recibidos    Pago[]  @relation("FotografoPagos")
  pagos_realizados   Pago[]  @relation("CompradorPagos")
  marcas_contenido   MarcaContenido[]
  visualizaciones    Visualizacion[]  @relation("UsuarioVisualizaciones")
  fotos_visualizadas Visualizacion[]  @relation("FotografoVisualizaciones")

  @@map("usuarios")
}

model Ubicacion {
  id       Int     @id @default(autoincrement())
  nombre   String
  latitud  Decimal @db.Decimal(9, 6)
  longitud Decimal @db.Decimal(9, 6)
  pais     String
  region   String
  fotos    Foto[]

  @@map("ubicaciones")
}

model Foto {
  id               Int              @id @default(autoincrement())
  titulo           String
  descripcion      String?
  fecha_subida     DateTime         @default(now())
  precio           Decimal          @db.Decimal(10, 2)
  ruta_archivo     String
  resolucion       String?
  modelo_camara    String?
  modelo_lente     String?
  distancia_focal  String?
  fecha_foto       DateTime?        @db.Date
  hora_foto        DateTime?        @db.Time
  hora_subida      DateTime?        @db.Time
  fotografo        Usuario          @relation("FotografoFotos", fields: [id_fotografo], references: [id])
  id_fotografo     Int
  ubicacion        Ubicacion        @relation(fields: [id_ubicacion], references: [id])
  id_ubicacion     Int
  etiquetas        FotoEtiqueta[]
  resenas          Resena[]
  marcas_contenido MarcaContenido[]
  visualizaciones  Visualizacion[]
  compras          CompraFoto[]

  @@index([precio])
  @@index([fecha_subida])
  @@map("fotos")
}

model Etiqueta {
  id     Int            @id @default(autoincrement())
  nombre String         @unique
  fotos  FotoEtiqueta[]

  @@map("etiquetas")
}

model FotoEtiqueta {
  foto        Foto     @relation(fields: [id_foto], references: [id])
  id_foto     Int
  etiqueta    Etiqueta @relation(fields: [id_etiqueta], references: [id])
  id_etiqueta Int

  @@id([id_foto, id_etiqueta])
  @@map("fotos_etiquetas")
}

model Compra {
  id                Int          @id @default(autoincrement())
  comprador         Usuario      @relation("CompradorCompras", fields: [id_comprador], references: [id])
  id_comprador      Int
  id_fotografo      Int
  fecha_compra      DateTime     @default(now())
  monto             Decimal      @db.Decimal(10, 2)
  estado            EstadoCompra
  ubicacion_usuario String?

  @@map("compras")
}

model CompraFoto {
  id_compra Int
  foto      Foto @relation(fields: [id_foto], references: [id])
  id_foto   Int

  @@id([id_compra, id_foto])
  @@map("compras_fotos")
}

model Resena {
  id           Int      @id @default(autoincrement())
  comprador    Usuario  @relation(fields: [id_comprador], references: [id])
  id_comprador Int
  foto         Foto     @relation(fields: [id_foto], references: [id])
  id_foto      Int
  calificacion Int
  texto_resena String?
  fecha_resena DateTime @default(now())

  @@index([fecha_resena])
  @@map("resenas")
}

model Pago {
  id                Int        @id @default(autoincrement())
  fotografo         Usuario    @relation("FotografoPagos", fields: [id_fotografo], references: [id])
  id_fotografo      Int
  comprador         Usuario?   @relation("CompradorPagos", fields: [id_comprador], references: [id])
  id_comprador      Int?
  monto             Decimal    @db.Decimal(10, 2)
  fecha_pago        DateTime   @default(now())
  estado            EstadoPago
  ubicacion_usuario String?
  id_pago           Int        @unique // Este campo debe ser único si es una relación uno a uno
  fotos             PagoFoto[]

  @@map("pagos_fotografos")
}

model PagoFoto {
  pago    Pago @relation(fields: [id_pago], references: [id]) // Verifica que el campo 'id_pago' exista y sea único en el modelo Pago
  id_pago Int
  id_foto Int

  @@id([id_pago, id_foto])
  @@map("pagos_fotos")
}

model MarcaContenido {
  id               Int                  @id @default(autoincrement())
  foto             Foto                 @relation(fields: [id_foto], references: [id])
  id_foto          Int
  marcador         Usuario              @relation(fields: [id_marcador], references: [id])
  id_marcador      Int
  razon            String
  estado           EstadoMarcaContenido
  fecha_resolucion DateTime?

  @@map("marcas_contenido")
}

model Visualizacion {
  id                  Int      @id @default(autoincrement())
  foto                Foto     @relation(fields: [id_foto], references: [id])
  id_foto             Int
  usuario             Usuario  @relation("UsuarioVisualizaciones", fields: [id_usuario], references: [id])
  id_usuario          Int
  fotografo           Usuario  @relation("FotografoVisualizaciones", fields: [id_fotografo], references: [id])
  id_fotografo        Int
  fecha_visualizacion DateTime @default(now())
  ip_usuario          String?
  dispositivo         String?
  navegador           String?

  @@index([fecha_visualizacion])
  @@map("visualizaciones")
}

enum TipoUsuario {
  Fotografo
  Comprador
  Administrador
}

enum EstadoCompra {
  Pendiente
  Completado
  Cancelado
}

enum EstadoPago {
  Pendiente
  Pagado
  Fallido
}

enum EstadoMarcaContenido {
  Pendiente
  Revisado
  Aprobado
  Rechazado
}
